// <auto-generated />
using System;
using BloodDonationApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonationApp.Infrastructure.Migrations
{
    [DbContext(typeof(BloodDonationContext))]
    partial class BloodDonationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodDonationApp.Domain.Donor", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("DonorEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonorFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastDonationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("JMBG");

                    b.HasIndex("PlaceID");

                    b.ToTable("Donors");

                    b.HasData(
                        new
                        {
                            JMBG = "0101995700001",
                            BloodType = 6,
                            DonorEmailAddress = "mijailovicmladen5@gmail.com",
                            DonorFullName = "Mladen Mijailovic",
                            IsActive = 1,
                            LastDonationDate = new DateTime(2024, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 12
                        },
                        new
                        {
                            JMBG = "0202995800002",
                            BloodType = 4,
                            DonorEmailAddress = "vladimir.lazarevic@fonis.rs",
                            DonorFullName = "Vladimir Lazarevic",
                            IsActive = 1,
                            LastDonationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 4
                        },
                        new
                        {
                            JMBG = "0303995900003",
                            BloodType = 5,
                            DonorEmailAddress = "sara.jana.djokic@gmail.com",
                            DonorFullName = "Sara Djokic",
                            IsActive = 1,
                            LastDonationDate = new DateTime(2023, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 1
                        },
                        new
                        {
                            JMBG = "0407945940004",
                            BloodType = 2,
                            DonorEmailAddress = "markovicc26@gmail.com",
                            DonorFullName = "Nemanja Markovic",
                            IsActive = 0,
                            LastDonationDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 2
                        },
                        new
                        {
                            JMBG = "1104345940234",
                            BloodType = 1,
                            DonorEmailAddress = "djordjemirkovic001@gmail.com",
                            DonorFullName = "Djordje Mirkovic",
                            IsActive = 1,
                            LastDonationDate = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 2
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Place", b =>
                {
                    b.Property<int>("PlaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceID"));

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceID");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            PlaceID = 1,
                            PlaceName = "Smederevo"
                        },
                        new
                        {
                            PlaceID = 2,
                            PlaceName = "Beograd"
                        },
                        new
                        {
                            PlaceID = 3,
                            PlaceName = "Sremska Mitrovica"
                        },
                        new
                        {
                            PlaceID = 4,
                            PlaceName = "Cacak"
                        },
                        new
                        {
                            PlaceID = 5,
                            PlaceName = "Novi Sad"
                        },
                        new
                        {
                            PlaceID = 6,
                            PlaceName = "Nis"
                        },
                        new
                        {
                            PlaceID = 7,
                            PlaceName = "Kraljevo"
                        },
                        new
                        {
                            PlaceID = 8,
                            PlaceName = "Subotica"
                        },
                        new
                        {
                            PlaceID = 9,
                            PlaceName = "Zrenjanin"
                        },
                        new
                        {
                            PlaceID = 10,
                            PlaceName = "Pancevo"
                        },
                        new
                        {
                            PlaceID = 11,
                            PlaceName = "Vlasotince"
                        },
                        new
                        {
                            PlaceID = 12,
                            PlaceName = "Novi Pazar"
                        },
                        new
                        {
                            PlaceID = 13,
                            PlaceName = "Kragujevac"
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Question", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<bool>("Answer")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JMBG", "QuestionnaireID", "ActionID", "QuestionID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Questionnaire", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionnaireTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JMBG", "QuestionnaireID", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("Questionnaires");

                    b.HasData(
                        new
                        {
                            JMBG = "0101995700001",
                            QuestionnaireID = 1,
                            ActionID = 5,
                            QuestionnaireTitle = "Upitnik za akciju Daj krv, spasi zivot u Novom Pazaru",
                            Remark = "Odbijen zbog niskog krvnog pritiska"
                        },
                        new
                        {
                            JMBG = "1104345940234",
                            QuestionnaireID = 2,
                            ActionID = 1,
                            QuestionnaireTitle = "Upitnik za akciju na FON-u",
                            Remark = "/"
                        },
                        new
                        {
                            JMBG = "1104345940234",
                            QuestionnaireID = 3,
                            ActionID = 3,
                            QuestionnaireTitle = "Upitnik za akciju u Vozdovim kapijama",
                            Remark = "Sve ok"
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.TransfusionAction", b =>
                {
                    b.Property<int>("ActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionID"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionTimeFromTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExactLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.HasKey("ActionID");

                    b.HasIndex("PlaceID");

                    b.ToTable("TransfusionActions");

                    b.HasData(
                        new
                        {
                            ActionID = 1,
                            ActionDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionName = "FON humanitarna akcija",
                            ActionTimeFromTo = "10:00 - 16:00",
                            ExactLocation = "Fakultet organizacionih nauka",
                            PlaceID = 2
                        },
                        new
                        {
                            ActionID = 2,
                            ActionDate = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionName = "Sportski centar Smederevo",
                            ActionTimeFromTo = "08:00 - 18:00",
                            ExactLocation = "Sportski centar",
                            PlaceID = 1
                        },
                        new
                        {
                            ActionID = 3,
                            ActionDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionName = "Dobrovoljno davanje krvi u Vozdovim kapijama",
                            ActionTimeFromTo = "09:00 - 14:00",
                            ExactLocation = "Crveni Krst Vozdovac",
                            PlaceID = 2
                        },
                        new
                        {
                            ActionID = 4,
                            ActionDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionName = "Krv za zivot",
                            ActionTimeFromTo = "11:00 - 17:00",
                            ExactLocation = "Opšta bolnica Niš",
                            PlaceID = 6
                        },
                        new
                        {
                            ActionID = 5,
                            ActionDate = new DateTime(2024, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionName = "Daj krv, spasi zivot",
                            ActionTimeFromTo = "10:00 - 15:00",
                            ExactLocation = "Dom Zdravlja NP",
                            PlaceID = 12
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.TransfusionCenterCoordinator", b =>
                {
                    b.Property<int>("CoordinatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoordinatorID"));

                    b.Property<string>("CoordinatorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordinatorFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoordinatorID");

                    b.ToTable("TransfusionCoordinators");

                    b.HasData(
                        new
                        {
                            CoordinatorID = 1,
                            CoordinatorCode = "DN4213",
                            CoordinatorFullName = "Dunja Nesic",
                            Password = "Dunja.Nesic13"
                        },
                        new
                        {
                            CoordinatorID = 2,
                            CoordinatorCode = "PN1107",
                            CoordinatorFullName = "Petar Nikodijevic",
                            Password = "PeraSD"
                        },
                        new
                        {
                            CoordinatorID = 3,
                            CoordinatorCode = "SJ3107",
                            CoordinatorFullName = "Stefan Jovanovic",
                            Password = "StefanJo3107"
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Volunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VolunteerID"));

                    b.Property<DateTime>("DateFreeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFreeTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("VolunteerEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VolunteerFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolunteerID");

                    b.HasIndex("PlaceID");

                    b.ToTable("Volunteers");

                    b.HasData(
                        new
                        {
                            VolunteerID = 1,
                            DateFreeFrom = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 1,
                            Sex = 1,
                            VolunteerEmailAddress = "filip.minja95@gmail.com",
                            VolunteerFullName = "Minja Filip"
                        },
                        new
                        {
                            VolunteerID = 2,
                            DateFreeFrom = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 2,
                            Sex = 1,
                            VolunteerEmailAddress = "nevenadukic4@gmail.com",
                            VolunteerFullName = "Nevena Dukic"
                        },
                        new
                        {
                            VolunteerID = 3,
                            DateFreeFrom = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 1,
                            Sex = 1,
                            VolunteerEmailAddress = "sfilip2022.10215@atssb.edu.rs",
                            VolunteerFullName = "Sofija Filip"
                        },
                        new
                        {
                            VolunteerID = 4,
                            DateFreeFrom = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2002, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 1,
                            Sex = 1,
                            VolunteerEmailAddress = "nesicvasilije02@gmail.com",
                            VolunteerFullName = "Vasilije Nesic"
                        },
                        new
                        {
                            VolunteerID = 5,
                            DateFreeFrom = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 2,
                            Sex = 1,
                            VolunteerEmailAddress = "iva.djokovic@fonis.rs",
                            VolunteerFullName = "Iva Djokovic"
                        },
                        new
                        {
                            VolunteerID = 6,
                            DateFreeFrom = new DateTime(2024, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 1,
                            Sex = 0,
                            VolunteerEmailAddress = "zippy@gmail.com",
                            VolunteerFullName = "Veljko Nedeljkovic"
                        },
                        new
                        {
                            VolunteerID = 7,
                            DateFreeFrom = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceID = 4,
                            Sex = 0,
                            VolunteerEmailAddress = "predrag.tanaskovic@fonis.rs",
                            VolunteerFullName = "Predrag Tanaskovic"
                        });
                });

            modelBuilder.Entity("CallToDonate", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.HasKey("JMBG", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("CallToDonate");
                });

            modelBuilder.Entity("CallToVolunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .HasColumnType("int");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.HasKey("VolunteerID", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("CallToVolunteer");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Donor", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Question", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.Questionnaire", "Questionnaire")
                        .WithMany("ListOfQuestions")
                        .HasForeignKey("JMBG", "QuestionnaireID", "ActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Questionnaire", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.TransfusionAction", "TransfusionAction")
                        .WithMany("ListOfQuestionnaires")
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.Donor", "Donor")
                        .WithMany("ListOfQuestionnaires")
                        .HasForeignKey("JMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("TransfusionAction");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.TransfusionAction", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Volunteer", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("CallToDonate", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.TransfusionAction", null)
                        .WithMany()
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.Donor", null)
                        .WithMany()
                        .HasForeignKey("JMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CallToVolunteer", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.TransfusionAction", null)
                        .WithMany()
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.Volunteer", null)
                        .WithMany()
                        .HasForeignKey("VolunteerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Donor", b =>
                {
                    b.Navigation("ListOfQuestionnaires");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Questionnaire", b =>
                {
                    b.Navigation("ListOfQuestions");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.TransfusionAction", b =>
                {
                    b.Navigation("ListOfQuestionnaires");
                });
#pragma warning restore 612, 618
        }
    }
}
