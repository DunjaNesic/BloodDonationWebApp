// <auto-generated />
using System;
using BloodDonationApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonationApp.Infrastructure.Migrations
{
    [DbContext(typeof(BloodDonationContext))]
    [Migration("20240612223603_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssignedOfficial", b =>
                {
                    b.Property<int>("OfficialID")
                        .HasColumnType("int");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.HasKey("OfficialID", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("AssignedOfficial");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.CallToDonate", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<bool>("AcceptedTheCall")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowedUp")
                        .HasColumnType("bit");

                    b.HasKey("JMBG", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("CallsToDonate");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.CallToVolunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .HasColumnType("int");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<bool>("AcceptedTheCall")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowedUp")
                        .HasColumnType("bit");

                    b.HasKey("VolunteerID", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("CallsToVolunteer");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Donor", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("DonorEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonorFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDonationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.HasKey("JMBG");

                    b.HasIndex("PlaceID");

                    b.ToTable("Donors");

                    b.HasData(
                        new
                        {
                            JMBG = "0101995700001",
                            BloodType = 6,
                            DonorEmailAddress = "mijailovicmladen5@gmail.com",
                            DonorFullName = "Mladen Mijailovic",
                            IsActive = true,
                            LastDonationDate = new DateTime(2024, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "comi",
                            PlaceID = 12
                        },
                        new
                        {
                            JMBG = "0202995800002",
                            BloodType = 4,
                            DonorEmailAddress = "vladimir.lazarevic@fonis.rs",
                            DonorFullName = "Vladimir Lazarevic",
                            IsActive = true,
                            LastDonationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "vlada",
                            PlaceID = 4
                        },
                        new
                        {
                            JMBG = "0303995900003",
                            BloodType = 5,
                            DonorEmailAddress = "sara.jana.djokic@gmail.com",
                            DonorFullName = "Sara Djokic",
                            IsActive = true,
                            LastDonationDate = new DateTime(2023, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "srdjkc",
                            PlaceID = 1
                        },
                        new
                        {
                            JMBG = "0407945940004",
                            BloodType = 2,
                            DonorEmailAddress = "markovicc26@gmail.com",
                            DonorFullName = "Nemanja Markovic",
                            IsActive = false,
                            LastDonationDate = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "nmnj",
                            PlaceID = 2
                        },
                        new
                        {
                            JMBG = "1104345940234",
                            BloodType = 1,
                            DonorEmailAddress = "djordjemirkovic001@gmail.com",
                            DonorFullName = "Djordje Mirkovic",
                            IsActive = true,
                            LastDonationDate = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "djole",
                            PlaceID = 2
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Official", b =>
                {
                    b.Property<int>("OfficialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficialID"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OfficialID");

                    b.ToTable("Officials");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Official");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            OfficialID = 1,
                            OfficialFullName = "Dunja Nesic",
                            Password = "123",
                            Username = "dule42"
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Place", b =>
                {
                    b.Property<int>("PlaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceID"));

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceID");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            PlaceID = 1,
                            PlaceName = "Smederevo"
                        },
                        new
                        {
                            PlaceID = 2,
                            PlaceName = "Beograd"
                        },
                        new
                        {
                            PlaceID = 3,
                            PlaceName = "Sremska Mitrovica"
                        },
                        new
                        {
                            PlaceID = 4,
                            PlaceName = "Cacak"
                        },
                        new
                        {
                            PlaceID = 5,
                            PlaceName = "Novi Sad"
                        },
                        new
                        {
                            PlaceID = 6,
                            PlaceName = "Nis"
                        },
                        new
                        {
                            PlaceID = 7,
                            PlaceName = "Kraljevo"
                        },
                        new
                        {
                            PlaceID = 8,
                            PlaceName = "Subotica"
                        },
                        new
                        {
                            PlaceID = 9,
                            PlaceName = "Zrenjanin"
                        },
                        new
                        {
                            PlaceID = 10,
                            PlaceName = "Pancevo"
                        },
                        new
                        {
                            PlaceID = 11,
                            PlaceName = "Vlasotince"
                        },
                        new
                        {
                            PlaceID = 12,
                            PlaceName = "Novi Pazar"
                        },
                        new
                        {
                            PlaceID = 13,
                            PlaceName = "Kragujevac"
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<int>("Flag")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionID");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionID = 1,
                            Flag = 0,
                            QuestionText = "Da li redovno (svakodnevno) uzimate bilo kakve lekove?"
                        },
                        new
                        {
                            QuestionID = 2,
                            Flag = 0,
                            QuestionText = "Da li ste poslednja 2-3 dana uzimali bilo kakve lekove (npr. Brufen, Kafetin, Analgin...)?"
                        },
                        new
                        {
                            QuestionID = 3,
                            Flag = 0,
                            QuestionText = "Da li stalno uzimate Aspirin (Cardiopirin)? Da li ste ga uzimali u poslednjih 5 dana?"
                        },
                        new
                        {
                            QuestionID = 4,
                            Flag = 0,
                            QuestionText = "Da li ste do sada ispitivani ili lečeni u bolnici ili ste trenutno na ispitivanju ili bolovanju?"
                        },
                        new
                        {
                            QuestionID = 5,
                            Flag = 0,
                            QuestionText = "Da li ste vadili zub u proteklih 7 dana?"
                        },
                        new
                        {
                            QuestionID = 6,
                            Flag = 0,
                            QuestionText = "Da li ste u poslednjih 7 do 10 dana imali temperaturu preko 38 C, kijavicu, prehladu ili uzimali antibiotike?"
                        },
                        new
                        {
                            QuestionID = 7,
                            Flag = 0,
                            QuestionText = "Da li ste u poslednjih 6 meseci naglo izgubili na težini?"
                        },
                        new
                        {
                            QuestionID = 8,
                            Flag = 0,
                            QuestionText = "Da li ste imali ubode krpelja u proteklih 12 meseci i da li ste se zbog toga javljali lekaru?"
                        },
                        new
                        {
                            QuestionID = 9,
                            Flag = 0,
                            QuestionText = "Da li ste ikada lečeni od epilepsije (padavice), šećerne bolesti, astme, tuberkuloze, infarkta, moždanog udara, malignih oboljenja, mentalnih bolesti ili malarije?"
                        },
                        new
                        {
                            QuestionID = 10,
                            Flag = 0,
                            QuestionText = "Da li bolujete od neke druge hronične bolesti: srca, pluća, bubrega, jetre, želuca i creva, kostiju i zglobova, nervnog sistema, krvi i krvnih sudova?"
                        },
                        new
                        {
                            QuestionID = 11,
                            Flag = 0,
                            QuestionText = "Da li ste u proteklih 6 meseci putovali ili živeli u inostranstvu?"
                        },
                        new
                        {
                            QuestionID = 12,
                            Flag = 0,
                            QuestionText = "Da li ste ikada imali problema sa štitastom žlezdom, hipofizom i/ili primali hormone?"
                        },
                        new
                        {
                            QuestionID = 13,
                            Flag = 0,
                            QuestionText = "Da li imate neke promene na koži ili bolujete od alergije?"
                        },
                        new
                        {
                            QuestionID = 14,
                            Flag = 0,
                            QuestionText = "Da li dugo krvavite posle povrede ili spontano dobijate modrice?"
                        },
                        new
                        {
                            QuestionID = 15,
                            Flag = 0,
                            QuestionText = "Da li ste bolovali ili bolujete od hepatitisa (žutice) A, B ili C?"
                        },
                        new
                        {
                            QuestionID = 16,
                            Flag = 0,
                            QuestionText = "Da li ste u proteklih 6 meseci imali akupunkturu, piercing ili tetovažu?"
                        },
                        new
                        {
                            QuestionID = 17,
                            Flag = 0,
                            QuestionText = "Da li mislite da je postojala mogućnost da se zarazite HIV-om?"
                        },
                        new
                        {
                            QuestionID = 18,
                            Flag = 0,
                            QuestionText = "Da li ste ikada koristili bilo koju vrstu droge?"
                        },
                        new
                        {
                            QuestionID = 19,
                            Flag = 0,
                            QuestionText = "Da li ste ikada koristili preparate koji se zvanično ne izdaju na recept i/ili preparate za bodi bilding (steroide)?"
                        },
                        new
                        {
                            QuestionID = 20,
                            Flag = 0,
                            QuestionText = "Da li znate na koje sve načine ste mogli izložiti sebe riziku od zaraznih, krvlju prenosivih bolesti?"
                        },
                        new
                        {
                            QuestionID = 21,
                            Flag = 0,
                            QuestionText = "Da li ste u proteklih 6 meseci imali neku operaciju ili primili krv?"
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Questionnaire", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfMaking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionnaireTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("JMBG", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("Questionnaires");

                    b.HasData(
                        new
                        {
                            JMBG = "0101995700001",
                            ActionID = 5,
                            Approved = false,
                            DateOfMaking = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionnaireTitle = "Upitnik za akciju Daj krv, spasi zivot u Novom Pazaru",
                            Remark = "Odbijen zbog niskog krvnog pritiska",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            JMBG = "1104345940234",
                            ActionID = 1,
                            Approved = true,
                            DateOfMaking = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionnaireTitle = "Upitnik za akciju na FON-u",
                            Remark = "/",
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            JMBG = "1104345940234",
                            ActionID = 3,
                            Approved = true,
                            DateOfMaking = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionnaireTitle = "Upitnik za akciju u Vozdovim kapijama",
                            Remark = "Sve ok",
                            RowVersion = new byte[0]
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.QuestionnaireQuestion", b =>
                {
                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionnaireJMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuestionnaireActionID")
                        .HasColumnType("int");

                    b.Property<bool>("Answer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("QuestionID", "QuestionnaireJMBG", "QuestionnaireActionID");

                    b.HasIndex("QuestionnaireJMBG", "QuestionnaireActionID");

                    b.ToTable("QuestionnaireQuestions");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.RedCross", b =>
                {
                    b.Property<int>("RedCrossID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RedCrossID"));

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.HasKey("RedCrossID");

                    b.HasIndex("PlaceID");

                    b.ToTable("RedCross");

                    b.HasData(
                        new
                        {
                            RedCrossID = 1,
                            InstitutionName = "CKSmederevo",
                            PlaceID = 1
                        },
                        new
                        {
                            RedCrossID = 2,
                            InstitutionName = "CK_Vozdovac",
                            PlaceID = 1
                        },
                        new
                        {
                            RedCrossID = 3,
                            InstitutionName = "Crveni krst NBG",
                            PlaceID = 3
                        },
                        new
                        {
                            RedCrossID = 4,
                            InstitutionName = "CK Sremska Mitrovica",
                            PlaceID = 4
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.TransfusionAction", b =>
                {
                    b.Property<int>("ActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionID"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionTimeFromTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExactLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficialID")
                        .HasColumnType("int");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ActionID");

                    b.HasIndex("OfficialID");

                    b.HasIndex("PlaceID");

                    b.ToTable("TransfusionActions");

                    b.HasData(
                        new
                        {
                            ActionID = 1,
                            ActionDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionName = "FON humanitarna akcija",
                            ActionTimeFromTo = "10:00 - 16:00",
                            ExactLocation = "Fakultet organizacionih nauka",
                            OfficialID = 1,
                            PlaceID = 2,
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            ActionID = 2,
                            ActionDate = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionName = "Sportski centar Smederevo",
                            ActionTimeFromTo = "08:00 - 18:00",
                            ExactLocation = "Sportski centar",
                            OfficialID = 1,
                            PlaceID = 1,
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            ActionID = 3,
                            ActionDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionName = "Dobrovoljno davanje krvi u Vozdovim kapijama",
                            ActionTimeFromTo = "09:00 - 14:00",
                            ExactLocation = "Crveni Krst Vozdovac",
                            OfficialID = 1,
                            PlaceID = 2,
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            ActionID = 4,
                            ActionDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionName = "Krv za zivot",
                            ActionTimeFromTo = "11:00 - 17:00",
                            ExactLocation = "Opšta bolnica Niš",
                            OfficialID = 1,
                            PlaceID = 6,
                            RowVersion = new byte[0]
                        },
                        new
                        {
                            ActionID = 5,
                            ActionDate = new DateTime(2024, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionName = "Daj krv, spasi zivot",
                            ActionTimeFromTo = "10:00 - 15:00",
                            ExactLocation = "Dom Zdravlja NP",
                            OfficialID = 1,
                            PlaceID = 12,
                            RowVersion = new byte[0]
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Volunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VolunteerID"));

                    b.Property<DateTime>("DateFreeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFreeTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RedCrossID")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VolunteerEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VolunteerFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolunteerID");

                    b.HasIndex("RedCrossID");

                    b.ToTable("Volunteers");

                    b.HasData(
                        new
                        {
                            VolunteerID = 1,
                            DateFreeFrom = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "leptirica",
                            RedCrossID = 1,
                            Sex = 1,
                            Username = "minja",
                            VolunteerEmailAddress = "filip.minja95@gmail.com",
                            VolunteerFullName = "Minja Filip"
                        },
                        new
                        {
                            VolunteerID = 2,
                            DateFreeFrom = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "nensi",
                            RedCrossID = 2,
                            Sex = 1,
                            Username = "nensi",
                            VolunteerEmailAddress = "nevenadukic4@gmail.com",
                            VolunteerFullName = "Nevena Dukic"
                        },
                        new
                        {
                            VolunteerID = 3,
                            DateFreeFrom = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "sof",
                            RedCrossID = 1,
                            Sex = 1,
                            Username = "sofija",
                            VolunteerEmailAddress = "sfilip2022.10215@atssb.edu.rs",
                            VolunteerFullName = "Sofija Filip"
                        },
                        new
                        {
                            VolunteerID = 4,
                            DateFreeFrom = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2002, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "nesic",
                            RedCrossID = 1,
                            Sex = 1,
                            Username = "vasa",
                            VolunteerEmailAddress = "nesicvasilije02@gmail.com",
                            VolunteerFullName = "Vasilije Nesic"
                        },
                        new
                        {
                            VolunteerID = 5,
                            DateFreeFrom = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "poz",
                            RedCrossID = 2,
                            Sex = 1,
                            Username = "pozitiva",
                            VolunteerEmailAddress = "iva.djokovic@fonis.rs",
                            VolunteerFullName = "Iva Djokovic"
                        },
                        new
                        {
                            VolunteerID = 6,
                            DateFreeFrom = new DateTime(2024, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "zephe",
                            RedCrossID = 1,
                            Sex = 0,
                            Username = "zippy",
                            VolunteerEmailAddress = "zippy@gmail.com",
                            VolunteerFullName = "Veljko Nedeljkovic"
                        },
                        new
                        {
                            VolunteerID = 7,
                            DateFreeFrom = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateFreeTo = new DateTime(2024, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "pedja",
                            RedCrossID = 4,
                            Sex = 0,
                            Username = "djpedja",
                            VolunteerEmailAddress = "predrag.tanaskovic@fonis.rs",
                            VolunteerFullName = "Predrag Tanaskovic"
                        });
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.MedicalWorker", b =>
                {
                    b.HasBaseType("BloodDonationApp.Domain.DomainModel.Official");

                    b.Property<string>("HealthcareOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MedicalWorker");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.RedCrossWorker", b =>
                {
                    b.HasBaseType("BloodDonationApp.Domain.DomainModel.Official");

                    b.Property<int>("RedCrossID")
                        .HasColumnType("int");

                    b.HasIndex("RedCrossID");

                    b.HasDiscriminator().HasValue("RedCrossWorker");
                });

            modelBuilder.Entity("AssignedOfficial", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.DomainModel.TransfusionAction", null)
                        .WithMany()
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.DomainModel.Official", null)
                        .WithMany()
                        .HasForeignKey("OfficialID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.CallToDonate", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.DomainModel.TransfusionAction", "Action")
                        .WithMany("ListOfCallsToDonors")
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.DomainModel.Donor", "Donor")
                        .WithMany("CallsToDonate")
                        .HasForeignKey("JMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.CallToVolunteer", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.DomainModel.TransfusionAction", "Action")
                        .WithMany("ListOfCallsToVolunteers")
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.DomainModel.Volunteer", "Volunteer")
                        .WithMany("CallsToVolunteer")
                        .HasForeignKey("VolunteerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Donor", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.DomainModel.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Questionnaire", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.DomainModel.TransfusionAction", "Action")
                        .WithMany("ListOfQuestionnaires")
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.DomainModel.Donor", "Donor")
                        .WithMany("ListOfQuestionnaires")
                        .HasForeignKey("JMBG")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.QuestionnaireQuestion", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.DomainModel.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.DomainModel.Questionnaire", "Questionnaire")
                        .WithMany("ListOfQuestions")
                        .HasForeignKey("QuestionnaireJMBG", "QuestionnaireActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.RedCross", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.DomainModel.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.TransfusionAction", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.DomainModel.Official", "ActionCoordinator")
                        .WithMany("CreatedActions")
                        .HasForeignKey("OfficialID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.DomainModel.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionCoordinator");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Volunteer", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.DomainModel.RedCross", "RedCross")
                        .WithMany()
                        .HasForeignKey("RedCrossID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RedCross");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.RedCrossWorker", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.DomainModel.RedCross", "RedCross")
                        .WithMany()
                        .HasForeignKey("RedCrossID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RedCross");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Donor", b =>
                {
                    b.Navigation("CallsToDonate");

                    b.Navigation("ListOfQuestionnaires");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Official", b =>
                {
                    b.Navigation("CreatedActions");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Questionnaire", b =>
                {
                    b.Navigation("ListOfQuestions");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.TransfusionAction", b =>
                {
                    b.Navigation("ListOfCallsToDonors");

                    b.Navigation("ListOfCallsToVolunteers");

                    b.Navigation("ListOfQuestionnaires");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.DomainModel.Volunteer", b =>
                {
                    b.Navigation("CallsToVolunteer");
                });
#pragma warning restore 612, 618
        }
    }
}
