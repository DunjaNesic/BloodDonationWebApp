// <auto-generated />
using System;
using BloodDonationApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonationApp.Infrastructure.Migrations
{
    [DbContext(typeof(BloodDonationContext))]
    [Migration("20240327202149_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BloodDonationApp.Domain.Donor", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("DonorEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonorFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastDonationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("JMBG");

                    b.HasIndex("PlaceID");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Place", b =>
                {
                    b.Property<int>("PlaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceID"));

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceID");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Question", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<bool>("Answer")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JMBG", "QuestionnaireID", "ActionID", "QuestionID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Questionnaire", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionnaireTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JMBG", "QuestionnaireID", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.TransfusionAction", b =>
                {
                    b.Property<int>("ActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionID"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionTimeFromTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExactLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.HasKey("ActionID");

                    b.HasIndex("PlaceID");

                    b.ToTable("TransfusionActions");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.TransfusionCenterCoordinator", b =>
                {
                    b.Property<int>("CoordinatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoordinatorID"));

                    b.Property<string>("CoordinatorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordinatorFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoordinatorID");

                    b.ToTable("TransfusionCoordinators");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Volunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VolunteerID"));

                    b.Property<DateTime>("DateFreeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFreeTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("VolunteerEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VolunteerFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolunteerID");

                    b.HasIndex("PlaceID");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("CallToDonate", b =>
                {
                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.HasKey("JMBG", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("CallToDonate");
                });

            modelBuilder.Entity("CallToVolunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .HasColumnType("int");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.HasKey("VolunteerID", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("CallToVolunteer");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Donor", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Question", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.Questionnaire", "Questionnaire")
                        .WithMany("ListOfQuestions")
                        .HasForeignKey("JMBG", "QuestionnaireID", "ActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Questionnaire", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.TransfusionAction", "TransfusionAction")
                        .WithMany("ListOfQuestionnaires")
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.Donor", "Donor")
                        .WithMany("ListOfQuestionnaires")
                        .HasForeignKey("JMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("TransfusionAction");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.TransfusionAction", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Volunteer", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("CallToDonate", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.TransfusionAction", null)
                        .WithMany()
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.Donor", null)
                        .WithMany()
                        .HasForeignKey("JMBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CallToVolunteer", b =>
                {
                    b.HasOne("BloodDonationApp.Domain.TransfusionAction", null)
                        .WithMany()
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BloodDonationApp.Domain.Volunteer", null)
                        .WithMany()
                        .HasForeignKey("VolunteerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Donor", b =>
                {
                    b.Navigation("ListOfQuestionnaires");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.Questionnaire", b =>
                {
                    b.Navigation("ListOfQuestions");
                });

            modelBuilder.Entity("BloodDonationApp.Domain.TransfusionAction", b =>
                {
                    b.Navigation("ListOfQuestionnaires");
                });
#pragma warning restore 612, 618
        }
    }
}
